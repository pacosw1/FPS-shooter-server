{"version":3,"sources":["src/GameContext.ts","src/Time.ts","src/Scene.ts","src/Bullet.ts","src/HP.ts","src/FireArm.ts","src/weapons/AssaultRifle.ts","src/Inventory.ts","src/Character.ts","src/PrettyMainMenuScene.ts","src/PauseScene.ts","src/Enemy.ts","src/GameOverScene.ts","src/PlayingScene.ts","src/Network.ts","src/Engine.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.c38ba22a.js","sourceRoot":"..","sourcesContent":["class GameContext {\n  public static readonly scale = 255;\n  public static context: CanvasRenderingContext2D = null;\n}\n\nexport default GameContext;\n","class Time {\n  // diferencia de tiempo entre último update y update actual\n  public static deltaTime: number = 0;\n  // Número de milisegundos que han pasado desde 1970\n  private static previousTime: number = Date.now();\n\n  public static update() {\n    const currentTime = Date.now();\n    Time.deltaTime = (currentTime - Time.previousTime) / 1000;\n    Time.previousTime = currentTime;\n  }\n}\n\nexport default Time;\n","import Engine from \"./Engine\";\n\nabstract class Scene {\n  public abstract render = () => {};\n  public abstract update = () => {};\n  public abstract enter = () => {};\n  public abstract keyUpHandler = (event: KeyboardEvent) => {};\n  public abstract keyDownHandler = (event: KeyboardEvent, engine: Engine) => {};\n  public abstract mouseMoveHandler = (event: MouseEvent) => {};\n  public engine : Engine;\n  constructor(engine : Engine) {\n    this.engine = engine;\n  }\n}\n\nexport default Scene;\n","import GameContext from \"./GameContext\";\nimport bulletSprite from \"../assets/EXTRAS/SpongeBullet.png\";\n\nclass Bullet {\n  public position;\n  public positionBuffer;\n  public color;\n  public opacity = 1;\n  private bulletImg: HTMLImageElement = new Image();\n  public rotation;\n  public initialPos;\n  public lineBuffer;\n  public colors = [\n    \"rgba(200, 209, 174, 1)\",\n    \"rgba(100, 209, 103, 1)\",\n    \"rgba(200, 111, 209, 1)\",\n    \"rgba(119, 200, 209, 1)\",\n    \"rgba(209, 200, 68, 1)\",\n  ];\n\n  public trail = [];\n\n  constructor(x, y, rotation) {\n    this.bulletImg.src = bulletSprite;\n    this.rotation = rotation;\n    this.positionBuffer = [];\n    this.position = { x, y };\n    this.lineBuffer = [];\n\n    this.color = \"rgba(100, 50, 1, .8)\";\n  }\n\n  public storeLastPosition(x, y) {\n    this.lineBuffer.push({ x, y });\n    if (this.lineBuffer.length > 25) {\n      this.lineBuffer.shift();\n    }\n  }\n\n  public updatePosition(x, y) {\n    this.position.x = x;\n    this.position.y = y;\n  }\n  public render = () => {\n    const { context } = GameContext;\n    let { x, y } = this.position;\n\n    context.save();\n    let degree = Math.atan2(this.rotation.Y, this.rotation.X);\n\n    if (this.lineBuffer.length >= 2) {\n      for (let i = 0; i < this.lineBuffer.length; i++) {\n        context.beginPath();\n\n        let fade = ((i + 1) / this.lineBuffer.length) * this.opacity;\n\n        let curr = this.lineBuffer[i];\n        context.lineWidth = 1;\n        context.strokeStyle = `rgb(240, 240, 240, ${fade / 35})`;\n        context.moveTo(curr.x, curr.y);\n        context.lineTo(x, y);\n        context.stroke();\n        context.fill();\n      }\n    }\n\n    context.translate(x, y);\n    context.rotate(degree);\n    context.translate(-x, -y);\n\n    context.drawImage(\n      this.bulletImg,\n      // this.currentFrame * (spriteWidth + paddingX),\n      0,\n      0,\n      100,\n      100,\n      x,\n      y,\n      100,\n      100\n    );\n\n    // context.beginPath();\n    // context.fillStyle = \"white\";\n\n    // context.arc(x, y, 1, 0, 2 * Math.PI);\n\n    // context.fill();\n\n    this.storeLastPosition(x, y);\n    // this.initialPos = this.position;\n\n    // context.closePath();\n    context.restore();\n  };\n\n  public update = () => {\n    // if (this.trail.length <= 5) {\n    //   this.trail.push({ x: this.position.x, y: this.position.y });\n    // } else {\n    //   this.trail.pop();\n    // }\n  };\n}\n\nexport default Bullet;\n","import GameContext from \"./GameContext\";\n\nclass HP {\n  public health = 0;\n  private width = 0.5;\n  private height = 5;\n  private playerWidth = 0;\n  private color = \"lime\";\n  public maxHealth = 0;\n  public healthPercentage = 1;\n  private position = { x: 0, y: 0 };\n\n  public updateHealth = (health, position) => {\n    this.health = health;\n    this.position = position;\n  };\n\n  constructor(position, health, playerWidth) {\n    this.position = position;\n    this.playerWidth = playerWidth;\n    this.health = health;\n    this.maxHealth = health;\n  }\n\n  render() {\n    const { context } = GameContext;\n    let { x, y } = this.position;\n\n    context.save();\n    context.beginPath();\n    y -= 28;\n    x -= 28;\n\n    context.fillStyle = this.color;\n    let start = x + 2;\n    for (let i = 0; i <= 100 * this.healthPercentage; i++) {\n      context.fillRect(start, y - 15, this.width, this.height);\n      start += this.width;\n    }\n\n    context.stroke();\n    context.closePath();\n    context.restore();\n  }\n\n  update() {\n    this.healthPercentage = this.health / this.maxHealth;\n    if (this.healthPercentage < 0.8 && this.healthPercentage >= 0.5)\n      this.color = \"#fccf03\";\n    else if (this.healthPercentage < 0.5 && this.healthPercentage >= 0.3)\n      this.color = \"orange\";\n    else if (this.healthPercentage < 0.3) this.color = \"red\";\n  }\n}\n\nexport default HP;\n","import GameContext from \"./GameContext\";\nimport Bullet from \"./Bullet\";\n\nabstract class FireArm {\n  abstract type;\n  abstract fireRate;\n  abstract reloadSpeed;\n  abstract range;\n  abstract magSize;\n  abstract damage;\n  abstract accuracy;\n  abstract lastFired;\n  abstract reloading;\n  abstract mag;\n\n  public abstract render = () => {};\n  public abstract update = () => {};\n\n  public getMag = () => {\n    return this.mag;\n  };\n\n  public fire = (socket, target, time, lastFired, fireRate) => {\n    //waits n seconds before firing a bullet (based on fire rate)\n    if (this.mag === 0) {\n      // this.emptyGun.play();\n    } else if (!this.reloading && this.mag >= 1) {\n      //if bullets in mag fire them\n      if ((time - lastFired) / 1000 >= 1 / fireRate) {\n        let buffer = new ArrayBuffer(6);\n        let view8 = new Uint8Array(buffer, 0, 1);\n        let view16 = new Uint16Array(buffer, 2, 2);\n        view8[0] = 3;\n        view16[0] = target.x;\n        view16[1] = target.y;\n\n        socket.send(buffer);\n\n        this.lastFired = new Date().getTime(); //update last time a shot was fired\n        this.mag--; //substract from magazine\n      }\n    }\n  };\n\n  public getType = () => {\n    return this.type;\n  };\n\n  public getMag = () => {\n    return this.mag;\n  };\n\n  public getMagCap = () => {\n    return this.magSize;\n  };\n\n  public load = (bullets) => {\n    this.mag += bullets;\n  };\n\n  public reload = () => {\n    // this.reloading = true;\n    // this.reloadGUn.play();\n    this.mag = this.magSize;\n  };\n}\n\nexport default FireArm;\n","import FireArm from \"../FireArm\";\n\nclass AssualtRifle extends FireArm {\n  fireRate = 3;\n  range = 10;\n  speed = 7;\n  damage = 5;\n  reloadSpeed = 0.8;\n  magSize = 40;\n  reloading = false;\n  type = \"ar\";\n  accuracy = 1;\n  lastFired = new Date().getTime();\n  private reloadStart = 0;\n  mag = 40;\n\n  constructor() {\n    super();\n    this.lastFired = new Date().getTime();\n  }\n\n  render = () => {};\n  update = () => {\n    if (this.reloading) {\n      if (20 - this.reloadStart / 1000 >= this.reloadSpeed)\n        this.reloading = false;\n    }\n  };\n}\n\nexport default AssualtRifle;\n","import GameContext from \"./GameContext\";\n\nclass Inventory {\n  private capacity;\n  private weight;\n  private items = [];\n  private bulletPouch = {\n    gun: 0,\n    ar: 0,\n    shotgun: 0,\n    sniper: 0\n  };\n\n  constructor(weapon) {\n    this.capacity = 10;\n    this.weight = 0;\n    this.bulletPouch.ar = 100;\n    this.items.push(weapon, this.bulletPouch);\n  }\n\n  update() {}\n\n  getAmmo = type => {\n    return this.bulletPouch[type];\n  };\n  pickUpAmmo = (type, qty) => {\n    if (this.bulletPouch[type] + qty > 100)\n      this.bulletPouch[type] += 100 - this.bulletPouch[type];\n    else this.bulletPouch[type] += qty;\n  };\n  loadAmmo = () => {\n    let { getMag, getMagCap, getType, load } = this.items[0];\n    let deltaAmmo = getMagCap() - getMag();\n    if (this.bulletPouch[getType()] >= deltaAmmo) {\n      this.bulletPouch[getType()] -= deltaAmmo;\n      return true;\n    } else {\n      load(this.bulletPouch[getType()]);\n      this.bulletPouch[getType()] = 0;\n    }\n    return false;\n  };\n\n  pickUpWeapon = weapon => {\n    this.items[0] = weapon;\n  };\n\n  dropWeapon = () => {\n    this.items[0] = null;\n  };\n}\n\nexport default Inventory;\n","import GameContext from \"./GameContext\";\nimport HP from \"./HP\";\nimport FireArm from \"./FireArm\";\nimport AssualtRifle from \"./weapons/AssaultRifle\";\nimport PlayingScene from \"./PlayingScene\";\n\nimport spritesheet from \"../assets/soldiers/Gunner/Gunner.png\";\nimport bulletSprite from \"../assets/EXTRAS/SpongeBullet.png\";\n\nimport Inventory from \"./Inventory\";\n\nclass Character {\n  private bag: Inventory;\n  private weapon: FireArm = new AssualtRifle();\n  private health = 100;\n  private socket;\n\n  private healthBar: HP = null;\n  private time;\n  private rotation;\n  private direction;\n  private rotate;\n\n  private radius = 35;\n  private playingScene;\n  private firing = false;\n  public positionBuffer;\n\n  private characterImage: HTMLImageElement = new Image();\n\n  private bulletImg: HTMLImageElement = new Image();\n\n  private lastPosition = { x: 0, y: 0 };\n\n  public position;\n\n  constructor(playingScene: PlayingScene, socket, position, rotation) {\n    this.characterImage.src = spritesheet;\n    this.bulletImg.src = bulletSprite;\n\n    this.rotation = rotation;\n    this.socket = socket;\n    this.direction = 0;\n    this.rotate = 0;\n    this.playingScene = playingScene;\n    this.time = new Date().getTime();\n    this.positionBuffer = [];\n    this.position = position;\n    this.lastPosition = position;\n\n    this.bag = new Inventory(this.weapon);\n    this.healthBar = new HP(this.position, 100, this.radius);\n  }\n\n  //updates current mouse coordinates on screen\n  public isDead = () => {\n    console.log(\"dead\");\n    return this.health <= 0;\n  };\n  public mouseMoveHandler = (event) => {};\n  public keydownHandler = (key) => {\n    console.log(key);\n    switch (key) {\n      case \"d\":\n        this.rotate = 1;\n        break;\n      case \"a\":\n        this.rotate = -1;\n        break;\n      case \"w\":\n        this.direction = 1;\n        break;\n      case \"s\":\n        this.direction = -1;\n        break;\n      case \" \":\n        this.firing = true;\n        break;\n      case \"r\":\n        this.reload();\n    }\n  };\n\n  public getBag = () => {\n    return this.bag;\n  };\n\n  public getWeapon = () => {\n    return this.weapon;\n  };\n  public getHealth = () => {\n    this.healthBar.healthPercentage;\n  };\n\n  public outOfMag() {\n    if (this.weapon.getMag() == 0) return true;\n    return false;\n  }\n\n  public keyupHandler = (key: string) => {\n    if (key === \"d\" || key === \"a\") {\n      this.rotate = 0;\n    }\n    if (key === \" \") this.firing = false;\n    if (key === \"w\" || key === \"s\") {\n      this.direction = 0;\n    }\n  };\n\n  reload = () => {\n    let reload = this.bag.loadAmmo();\n    if (reload) this.weapon.reload();\n  };\n  // returns characters health\n\n  public update() {\n    this.healthBar.updateHealth(this.health, this.position);\n    this.healthBar.update();\n    this.time = new Date().getTime();\n  }\n\n  public syncStats = (state) => {\n    this.health = state.Health;\n    this.rotation = state.Rotation;\n  };\n\n  public setPosition = (position) => {\n    this.position.x = position.x;\n    this.position.y = position.y;\n  };\n\n  public renderPrediction = (input) => {\n    let speed = 3;\n\n    if (this.rotate != 0) {\n      this.predictRotate();\n    }\n    if (this.direction != 0) {\n      let { X, Y } = this.rotation;\n\n      let vectorLen = Math.sqrt(X * X + Y * Y);\n\n      let dx, dy;\n      dx = this.position.x + (this.rotation.X / vectorLen) * speed;\n      dy = this.position.y + (this.rotation.Y / vectorLen) * speed;\n\n      this.position.x = Math.floor(dx * 100) / 100;\n      this.position.y = Math.floor(dy * 100) / 100;\n      //   if ((pressX > 0 && predicitonX <= 1400) || (pressX < 0 && predicitonX >= 0))\n      //     this.position.x = predicitonX;\n      //   if ((pressY > 0 && predicitonY <= 1000) || (pressY < 0 && predicitonY >= 0))\n      //     this.position.y = predicitonY;\n    }\n  };\n\n  public playerInput = () => {\n    this.playingScene.processInputs(this.direction, this.rotate, this.firing);\n    this.update();\n  };\n\n  public predictRotate = () => {\n    let degree = (1.0 / 15) * this.rotate;\n    let X = this.rotation.X;\n    let Y = this.rotation.Y;\n    let dx = Math.cos(degree) * X - Math.sin(degree) * Y;\n    let dy = Math.sin(degree) * X + Math.cos(degree) * Y;\n\n    this.rotation.X = dx;\n    this.rotation.Y = dy;\n  };\n\n  public render = () => {\n    const { context } = GameContext;\n    let { height, width } = context.canvas;\n\n    let { x, y } = this.position;\n    console.log(this.rotation);\n\n    const paddingY = 35;\n    const paddingX = 35;\n    const spriteHeight = 96;\n    const spriteWidth = 96;\n\n    context.save();\n\n    /**x - paddingX / 2 - 5,\n      y - paddingY / 2 - 5, */\n\n    // context.rotate(1);\n    // context.setTransform(1, 0, 0, 1, x, y);\n    // context.translate(x, y);\n    let degree = Math.atan2(this.rotation.Y, this.rotation.X);\n    x -= 15;\n    y -= 15;\n\n    this.healthBar.render();\n\n    let c = { x: x + 15, y: y + 15 };\n    context.translate(c.x, c.y);\n    context.rotate(degree - Math.PI / 2);\n    context.translate(-c.x, -c.y);\n\n    context.drawImage(\n      this.characterImage,\n      // this.currentFrame * (spriteWidth + paddingX),\n      paddingX,\n      paddingY,\n      spriteWidth,\n      spriteHeight,\n      x - 7,\n      y - 2,\n      150,\n      150\n    );\n\n    context.restore();\n  };\n}\n\nexport default Character;\n","import Scene from \"./Scene\";\nimport GameContext from \"./GameContext\";\nimport Engine from \"./Engine\";\nimport PlayingScene from \"./PlayingScene\";\nimport GoodbyeScene from \"./GoodbyeScene\";\n\nclass PrettyMainMenuScene extends Scene {\n  private currentOption: number = 0;\n  private options = [\"Play\", \"Quit\"];\n\n  public render = () => {\n    let { options } = this;\n    var context = GameContext.context;\n    const { width, height } = context.canvas;\n\n    context.save();\n    context.beginPath();\n\n    context.textAlign = \"center\";\n    context.fillStyle = \"\";\n    context.font = \"70px 'Oswald' \";\n    context.strokeStyle = \"green\";\n    context.fillStyle = \"white\";\n\n    // context.fillText(\"Zombies\", width / 2 - 80, 140);\n    // context.fillStyle = \"#98c695\";\n    context.fillText(\"Zombies\", width / 2, 140);\n    context.font = \"18px 'Open Sans Condensed' \";\n    context.fillStyle = \"green\";\n\n    context.fillText(\"Multiplayer\", width / 2, 170);\n\n    context.font = \"35px 'Roboto Mono' \";\n\n    for (let i = 0; i < options.length; i++) {\n      if (i == this.currentOption) {\n        context.fillStyle = \"green\";\n        context.fillText(\n          options[i],\n          width / 2,\n          height / 2 + i * 35 + i * 10 + 30\n        );\n      } else context.fillStyle = \"white\";\n      context.fillText(\n        options[i],\n        width / 2,\n        height / 2 + i * 35 + i * 10 + 30\n      );\n    }\n\n    context.closePath();\n    context.restore();\n  };\n  public update = () => {};\n  public enter = () => {};\n  public keyUpHandler = (event: KeyboardEvent) => {};\n  public keyDownHandler = (event: KeyboardEvent, engine: Engine) => {\n    const key = event.key;\n\n    switch (key) {\n      case \"ArrowUp\":\n        this.currentOption =\n          (this.currentOption - 1 + this.options.length) % this.options.length;\n\n        break;\n      case \"ArrowDown\":\n        this.currentOption = (this.currentOption + 1) % this.options.length;\n\n        break;\n      case \"Enter\":\n        if (this.currentOption === 0) this.engine.playerReady = true;\n    }\n  };\n}\n\nexport default PrettyMainMenuScene;\n","import Scene from \"./Scene\";\nimport GameContext from \"./GameContext\";\nimport Engine from \"./Engine\";\nimport PlayingScene from \"./PlayingScene\";\nimport PrettyMainMenuScene from \"./PrettyMainMenuScene\";\n\nclass PrettyPauseScene extends Scene {\n  private currentOption: number = 0;\n  private options = [\"Resume\", \"Main menu\"];\n  private scene: Scene;\n\n  constructor(engine: Engine, scene: Scene) {\n    super(engine);\n    this.scene = scene;\n  }\n\n  public render = () => {\n    let { options } = this;\n    var context = GameContext.context;\n    const { width, height } = context.canvas;\n\n    context.save();\n    context.beginPath();\n\n    context.textAlign = \"center\";\n    context.fillStyle = \"white\";\n    context.font = \"70px 'Oswald' \";\n    context.strokeStyle = \"white\";\n\n    context.fillText(\"PAUSE\", width / 2, 140);\n    context.fillStyle = \"#98c695\";\n    context.font = \"18px 'Open Sans Condensed' \";\n\n    context.font = \"35px 'Roboto Mono' \";\n\n    for (let i = 0; i < options.length; i++) {\n      if (i == this.currentOption) {\n        context.fillStyle = \"#98c695\";\n        context.fillText(\n          options[i],\n          width / 2,\n          height / 2 + i * 35 + i * 10 + 30\n        );\n      } else context.fillStyle = \"white\";\n      context.fillText(\n        options[i],\n        width / 2,\n        height / 2 + i * 35 + i * 10 + 30\n      );\n    }\n    context.closePath();\n    context.restore();\n  };\n  public update = () => {};\n  public enter = () => {};\n  public keyUpHandler = (event: KeyboardEvent) => {};\n  public mouseMoveHandler = (event: MouseEvent) => {};\n  public keyDownHandler = (event: KeyboardEvent, engine: Engine) => {\n    const key = event.key;\n\n    switch (key) {\n      case \"ArrowUp\":\n        this.currentOption =\n          (this.currentOption - 1 + this.options.length) % this.options.length;\n\n        break;\n      case \"ArrowDown\":\n        this.currentOption = (this.currentOption + 1) % this.options.length;\n\n        break;\n      case \"Enter\":\n        if (this.currentOption === 0) {\n          engine.setCurrentScene(this.scene);\n          break;\n        }\n        if (this.currentOption === 1) {\n          engine.setCurrentScene(new PrettyMainMenuScene(this.engine));\n          break;\n        }\n    }\n  };\n}\n\nexport default PrettyPauseScene;\n","import HP from \"./HP\";\nimport GameContext from \"./GameContext\";\n\nimport spritesheet from \"../assets/soldiers/Gunner/Gunner.png\";\n\nclass Enemy {\n  public position;\n  public health;\n  private healthBar: HP;\n  private rotation;\n  public positionBuffer;\n  private characterImage: HTMLImageElement = new Image();\n\n  constructor(position, rotation) {\n    this.rotation = rotation;\n    this.position = { x: position.X, y: position.Y };\n    this.health = 100;\n    this.characterImage.src = spritesheet;\n\n    this.positionBuffer = [];\n    this.healthBar = new HP(this.position, this.health, 30);\n  }\n\n  public syncStats = (state) => {\n    this.health = state.Health;\n    this.healthBar.updateHealth(this.health, this.position);\n    this.rotation = state.Rotation;\n    this.healthBar.update();\n  };\n\n  public render = () => {\n    const { context } = GameContext;\n    let { height, width } = context.canvas;\n\n    let { x, y } = this.position;\n    console.log(this.rotation);\n\n    const paddingY = 35;\n    const paddingX = 35;\n    const spriteHeight = 96;\n    const spriteWidth = 96;\n\n    context.save();\n\n    this.healthBar.render();\n\n    /**x - paddingX / 2 - 5,\n      y - paddingY / 2 - 5, */\n\n    // context.rotate(1);\n    // context.setTransform(1, 0, 0, 1, x, y);\n    // context.translate(x, y);\n    let degree = Math.atan2(this.rotation.Y, this.rotation.X);\n    x -= 15;\n    y -= 15;\n\n    let c = { x: x + 15, y: y + 15 };\n    context.translate(c.x, c.y);\n    context.rotate(degree - Math.PI / 2);\n    context.translate(-c.x, -c.y);\n\n    context.drawImage(\n      this.characterImage,\n      // this.currentFrame * (spriteWidth + paddingX),\n      paddingX,\n      paddingY,\n      spriteWidth,\n      spriteHeight,\n      x - 7,\n      y - 2,\n      150,\n      150\n    );\n\n    context.restore();\n  };\n}\n\nexport default Enemy;\n","import Scene from \"./Scene\";\nimport GameContext from \"./GameContext\";\nimport Engine from \"./Engine\";\nimport PlayingScene from \"./PlayingScene\";\nimport GoodbyeScene from \"./GoodbyeScene\";\n\nclass GameOverScene extends Scene {\n  private currentOption: number = 0;\n  private options = [\"Play Again\", \"Quit\"];\n\n  public render = () => {\n    let { options } = this;\n    var context = GameContext.context;\n    const { width, height } = context.canvas;\n\n    context.save();\n    context.beginPath();\n\n    context.textAlign = \"center\";\n    context.fillStyle = \"white\";\n    context.font = \"70px 'Oswald' \";\n    context.strokeStyle = \"white\";\n\n    context.fillText(\"GAME\", width / 2 - 80, 140);\n    context.fillStyle = \"#98c695\";\n    context.fillText(\"OVER\", width / 2 + 85, 140);\n    context.fillStyle = \"white\";\n    context.font = \"18px 'Open Sans Condensed' \";\n\n    context.font = \"35px 'Roboto Mono' \";\n\n    for (let i = 0; i < options.length; i++) {\n      if (i == this.currentOption) {\n        context.fillStyle = \"#98c695\";\n        context.fillText(\n          options[i],\n          width / 2,\n          height / 2 + i * 35 + i * 10 + 30\n        );\n      } else context.fillStyle = \"white\";\n      context.fillText(\n        options[i],\n        width / 2,\n        height / 2 + i * 35 + i * 10 + 30\n      );\n    }\n\n    context.closePath();\n    context.restore();\n  };\n  public update = () => {};\n  public enter = () => {};\n  public keyUpHandler = (event: KeyboardEvent) => {};\n  public keyDownHandler = (event: KeyboardEvent, engine: Engine) => {\n    const key = event.key;\n\n    switch (key) {\n      case \"ArrowUp\":\n        this.currentOption =\n          (this.currentOption - 1 + this.options.length) % this.options.length;\n\n        break;\n      case \"ArrowDown\":\n        this.currentOption = (this.currentOption + 1) % this.options.length;\n\n        break;\n      case \"Enter\":\n        if (this.currentOption === 0) this.engine.playerReady = true;\n    }\n  };\n}\n\nexport default GameOverScene;\n","import Scene from \"./Scene\";\nimport Bullet from \"./Bullet\";\n\nimport Character from \"./Character\";\nimport Engine from \"./Engine\";\n\nimport PauseScene from \"./PauseScene\";\nimport GameContext from \"./GameContext\";\n\nimport Animal from \"./Animal\";\nimport Enemy from \"./Enemy\";\nimport Network from \"./Network\";\nimport Damage from \"./Damage\";\nimport MainMenuScene from \"./MainMenuScene\";\nimport GameOverScene from \"./GameOverScene\";\n\nclass PlayingScene extends Scene {\n  private characters;\n  public bullets;\n  public socket;\n  private pendingInputs;\n  private time;\n  public clientConnected;\n  public serverState;\n  public damage;\n  public lastUpdate;\n\n  public sequence;\n\n  public ping;\n\n  constructor(engine: Engine) {\n    super(engine);\n    this.lastUpdate = null;\n    this.socket = engine.socket;\n    this.characters = {};\n    this.bullets = {};\n    this.clientConnected = +new Date();\n    this.pendingInputs = [];\n    this.damage = [];\n    this.sequence = 0;\n    this.serverState = { players: {} };\n    this.time = 0;\n    console.log(this.socket.id);\n    this.characters[this.socket.id] = new Character(\n      this,\n      this.socket,\n      {\n        x: 0,\n        y: 0,\n      },\n      { X: 0, Y: 0 }\n    );\n    this.socket.addEventListener(\"close\", () => {\n      this.closeConnection();\n    });\n  }\n\n  // this.updateProjectiles(projectiles);\n\n  closeConnection = () => {\n    this.engine.connected = false;\n    this.engine.playerReady = false;\n    this.engine.socket = null;\n    this.engine.network = null;\n\n    this.engine.setCurrentScene(new GameOverScene(this.engine));\n  };\n\n  decodeProjectile = (projectile) => {\n    let { Position, ID, Rotation } = projectile;\n\n    if (!this.bullets[ID])\n      this.bullets[ID] = new Bullet(Position.X, Position.Y, Rotation);\n\n    this.bullets[ID].positionBuffer.push([\n      this.time,\n      { x: Position.X, y: Position.Y },\n    ]);\n    this.serverState.projectiles[ID] = 1;\n  };\n\n  decodePlayer = (player) => {\n    // let view16 = new Uint16Array(gameState, start, 3);\n    // let view8 = new Uint8Array(gameState, start + 6, 2);\n\n    let { ID, Health, Position, Rotation, SequenceID } = player;\n    let { X, Y } = Position;\n    this.serverState.players[ID] = 1;\n\n    if (!this.characters[ID]) {\n      this.characters[ID] = new Enemy({ X, Y }, Rotation);\n    } else {\n      let player = this.characters[ID];\n\n      player.syncStats({ Health, Rotation });\n\n      if (ID == this.socket.id) {\n        player.position.x = X;\n        player.position.y = Y;\n\n        let j = 0;\n        while (j < this.pendingInputs.length) {\n          let input = this.pendingInputs[j];\n\n          if (input.SequenceID <= SequenceID) {\n            this.pendingInputs.splice(j, 1);\n          } else {\n            player.renderPrediction(input);\n            j++;\n          }\n        }\n      } else {\n        player.positionBuffer.push([this.time, { x: X, y: Y }]);\n      }\n    }\n  };\n\n  decodeState = () => {\n    this.socket.onmessage = ({ data }) => {\n      var gameState = JSON.parse(data);\n      let { Players, Projectiles } = gameState;\n      this.serverState = { players: {}, projectiles: {} };\n      // let size = gameState.byteLength;\n      // let overhead = new Uint16Array(gameState, 0, 2);\n      // // console.log(\"size: \" + size);\n      // // console.log(\"projectiles start at byte : \" + overhead[1]);\n      for (let player in Players) {\n        this.decodePlayer(Players[player]);\n      }\n\n      for (let proj in Projectiles) {\n        this.decodeProjectile(Projectiles[proj]);\n      }\n    };\n\n    // updateProjectiles = projectiles => {\n    //   for (let ID in projectiles) {\n    //     let bulletState = projectiles[ID];\n    //     let [x, y] = bulletState;\n\n    //     let pos = { x, y };\n    //     if (!this.bullets[ID]) {\n    //       this.bullets[ID] = new Bullet(pos);\n    //     }\n    //     this.bullets[ID].positionBuffer.push([this.time, pos]);\n    //   }\n    // };\n  };\n\n  onConnect = (id) => {\n    this.socket.id = id;\n  };\n\n  compressTimestamp = () => {\n    let compressed = this.time - this.clientConnected;\n    return compressed;\n  };\n\n  encodeMovement = ({ sequenceID, pressTimeX, pressTimeY }) => {\n    let buffer = new ArrayBuffer(6);\n    let viewUnsigned = new Uint16Array(buffer, 4, 1);\n    let view8 = new Int8Array(buffer, 0, 3);\n\n    //int32 array\n    //uses bytes 0-4\n\n    viewUnsigned[0] = sequenceID;\n\n    // //int8 array starts at byte 4\n    view8[1] = pressTimeX;\n    view8[2] = pressTimeY;\n\n    // // //move command;\n    view8[0] = 2;\n\n    return buffer;\n  };\n\n  processInputs = (direction, rotation, firing) => {\n    let { x, y } = direction;\n    let input = {\n      Direction: direction,\n      IsShooting: firing,\n      Rotation: rotation,\n      SequenceID: 0,\n      ID: this.socket.id,\n    };\n\n    let timePrev = this.lastUpdate || this.time;\n    let deltaTime = this.time - timePrev;\n    this.lastUpdate = this.time;\n\n    // console.log(input.pressTimeX * 1000);\n    //send input to server\n\n    if (direction == 0 && rotation == 0 && firing == false) {\n    } else {\n      input.SequenceID = this.sequence++;\n\n      // let encodedInput = this.encodeMovement(input);\n\n      this.socket.send(JSON.stringify(input));\n\n      // input.pressTimeX /= 1000;\n      // input.pressTimeY /= 1000;\n      this.pendingInputs.push(input);\n      this.characters[this.socket.id].renderPrediction(input);\n\n      //keep a copy of last inputs\n    }\n  };\n\n  renderBullets = () => {\n    for (let id in this.bullets) {\n      this.bullets[id].opacity -= 0.002;\n\n      this.bullets[id].render();\n    }\n  };\n\n  renderCharacters = () => {\n    for (let id in this.characters) {\n      this.characters[id].render();\n    }\n  };\n\n  predictProjectiles = () => {};\n\n  interpolatePlayers = () => {\n    let now = this.time;\n    let renderTimestamp = now - 1000.0 / 10;\n\n    for (let id in this.characters) {\n      let character = this.characters[id];\n      if (id != this.socket.id) {\n        if (!this.serverState.players[id]) {\n          delete this.characters[id];\n          return;\n        }\n        let buffer = character.positionBuffer;\n        while (buffer.length >= 2 && buffer[1][0] <= renderTimestamp) {\n          buffer.shift();\n        }\n\n        if (\n          buffer.length >= 2 &&\n          buffer[0][0] <= renderTimestamp &&\n          renderTimestamp <= buffer[1][0]\n        ) {\n          let x0 = buffer[0][1].x;\n          let x1 = buffer[1][1].x;\n\n          let y0 = buffer[0][1].y;\n          let y1 = buffer[1][1].y;\n\n          let t0 = buffer[0][0];\n          let t1 = buffer[1][0];\n\n          let finalX = x0 + ((x1 - x0) * (renderTimestamp - t0)) / (t1 - t0);\n          let finalY = y0 + ((y1 - y0) * (renderTimestamp - t0)) / (t1 - t0);\n\n          this.characters[id].position.x = finalX;\n          this.characters[id].position.y = finalY;\n        }\n      }\n    }\n  };\n\n  interpolateBullets = () => {\n    let renderTimestamp = this.time - 1000.0 / 10;\n    for (let id in this.bullets) {\n      if (!this.serverState.projectiles[id]) {\n        delete this.bullets[id];\n        return;\n      }\n      let bullet = this.bullets[id];\n\n      let buffer = bullet.positionBuffer;\n      while (buffer.length >= 2 && buffer[1][0] <= renderTimestamp) {\n        buffer.shift();\n      }\n\n      if (\n        buffer.length >= 2 &&\n        buffer[0][0] <= renderTimestamp &&\n        renderTimestamp <= buffer[1][0]\n      ) {\n        let x0 = buffer[0][1].x;\n        let x1 = buffer[1][1].x;\n\n        let y0 = buffer[0][1].y;\n        let y1 = buffer[1][1].y;\n\n        let t0 = buffer[0][0];\n        let t1 = buffer[1][0];\n\n        let finalX = x0 + ((x1 - x0) * (renderTimestamp - t0)) / (t1 - t0);\n        let finalY = y0 + ((y1 - y0) * (renderTimestamp - t0)) / (t1 - t0);\n\n        bullet.updatePosition(Math.floor(finalX), Math.floor(finalY));\n      }\n    }\n  };\n\n  public render = () => {\n    // this.renderDamage();\n    // GameContext.context.clearRect(0, 0, 1500, 1200);\n\n    this.renderCharacters();\n    this.renderBullets();\n\n    // context.fillStyle = \"white\";\n    // context.fillText(\"Ping: \" + this.ping + \"ms\", 100, 100, 100);\n    // context.font = \"50px times new roman\";\n    // context.fill();\n    // context.closePath();\n    // GameContext.context.restore();\n  };\n\n  public update = () => {\n    this.decodeState();\n    // if (this.characters[this.socket.id].isDead()) {\n    //   this.engine.setCurrentScene(new PrettyGameOverScene(this.engine));\n    // }\n\n    this.characters[this.socket.id].playerInput();\n\n    this.interpolatePlayers();\n    this.interpolateBullets();\n\n    this.time = +new Date();\n  };\n\n  public enter = () => {\n    this.time = new Date().getTime();\n  };\n\n  public mouseMoveHandler = (event: MouseEvent) => {\n    this.characters[this.socket.id].mouseMoveHandler(event);\n  };\n  public keyDownHandler = (event: KeyboardEvent, engine: Engine) => {\n    const { key } = event;\n\n    if (key == \"p\") engine.setCurrentScene(new PauseScene(this.engine, this));\n    this.characters[this.socket.id].keydownHandler(key);\n  };\n  public keyUpHandler = (event: KeyboardEvent) => {\n    const { key } = event;\n\n    this.characters[this.socket.id].keyupHandler(key);\n  };\n}\n\nexport default PlayingScene;\n","class Network {\n  private open;\n  private connected;\n  public socket;\n  public id;\n  public time;\n\n  constructor() {\n    this.socket = new WebSocket(\"ws://66.11.115.206:8080/socket\");\n    // this.socket.binaryType = \"arraybuffer\";\n\n    this.connected = false;\n    this.open = false;\n  }\n\n  //codes\n\n  /*\n  \n  code 0: successful websocket open \n  code 1: succesfful connection;\n  \n  \n  */\n\n  established = () => {\n    return this.connected;\n  };\n\n  public connect = () => {\n    console.log(\"Attempting to connect\");\n    if (!this.connected) this.awaitOpen();\n  };\n\n  awaitOpen = () => {\n    console.log(\"checking open\");\n    this.socket.onopen = () => {\n      // this.socket.send(new ArrayBuffer(0));\n      this.socket.onmessage = ({ data }) => {\n        data = JSON.parse(data);\n        // let view = new Uint8Array(data);\n        // if (view[0] == 1) {\n        if (!this.connected) this.socket.id = data.ClientID;\n        console.log(data);\n        this.connected = true;\n        // this.socket.id = view[1];\n        // this.connected = true;\n      };\n    };\n  };\n\n  getSocket = () => {\n    return this.socket;\n  };\n\n  awaitHandshake = () => {\n    console.log(\"establishing connection\");\n  };\n}\n\nexport default Network;\n","import GameContext from \"./GameContext\";\nimport Time from \"./Time\";\nimport Scene from \"./Scene\";\nimport PlayingScene from \"./PlayingScene\";\nimport MainMenuScene from \"./MainMenuScene\";\nimport PrettyMainMenuScene from \"./PrettyMainMenuScene\";\nimport GameOverScene from \"./GameOverScene\";\nimport WinningScene from \"./WinningScene\";\nimport GoodbyeScene from \"./GoodbyeScene\";\nimport Network from \"./Network\";\n\nclass Engine {\n  public socket;\n  public connected;\n  public playerReady;\n  public network;\n\n  constructor() {\n    this.connected = false;\n    this.playerReady = false;\n    this.network = null;\n  }\n  public currentScene: Scene = null;\n  // Iniciar el motor del juego.\n  public start = () => {\n    this.init();\n\n    requestAnimationFrame(this.tick);\n  };\n\n  public mousemoveHandler = (event: MouseEvent) => {\n    this.currentScene.mouseMoveHandler(event);\n  };\n  public keydownHandler = (event: KeyboardEvent) => {\n    this.currentScene.keyDownHandler(event, this);\n  };\n\n  public keyupHandler = (event: KeyboardEvent) => {\n    this.currentScene.keyUpHandler(event);\n  };\n\n  // Limpiar pantalla y dibujar fondo.\n  private clearScreen = () => {\n    const context = GameContext.context;\n    const canvas = context.canvas;\n    const width = canvas.width;\n    const height = canvas.height;\n\n    context.save();\n    context.beginPath();\n    context.fillStyle = \"grey\";\n    context.fillRect(0, 0, width, height);\n\n    context.closePath();\n    context.restore();\n  };\n\n  public setCurrentScene = (scene: Scene) => {\n    this.currentScene = scene;\n    this.currentScene.enter();\n  };\n  public init = () => {\n    this.currentScene = new PrettyMainMenuScene(this);\n    this.currentScene.enter();\n  };\n\n  // Método que se ejecuta en cada frame del juego.\n  public tick = () => {\n    this.clearScreen();\n    Time.update();\n\n    if (!this.connected && this.playerReady) {\n      if (!this.network) this.network = new Network();\n      this.network.connect();\n      if (this.network.established()) {\n        this.socket = this.network.getSocket();\n        console.log(\"established\");\n        this.connected = true;\n        this.setCurrentScene(new PlayingScene(this));\n      }\n    }\n\n    this.currentScene.update();\n    this.currentScene.render();\n    requestAnimationFrame(this.tick);\n  };\n}\n\nexport default Engine;\n","import Engine from \"./Engine\";\nimport GameContext from \"./GameContext\";\n\nconst canvas = document.getElementById(\"game-area\") as HTMLCanvasElement;\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\nconst context = canvas.getContext(\"2d\");\n\nGameContext.context = context;\n\nconst engine = new Engine();\nengine.start();\n\ncanvas.addEventListener(\"keydown\", engine.keydownHandler);\ncanvas.addEventListener(\"keyup\", engine.keyupHandler);\ncanvas.addEventListener(\"mousemove\", engine.mousemoveHandler);\n"]}